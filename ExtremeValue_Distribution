library(tidyverse)
library(EnvStats)
library(rootSolve)
library(SpatialExtremes)
library(pracma)
library(expint)

### Test statistics for Cramer von Mises- and Anderson Darling test for Goodness of fit
W2 <- function(x){
  n <- length(x)
  result <- sum((x - (seq(1, 2 * n - 1, 2) / (2 * n))) ** 2)
  return(result + 1 / (12 * n))
}

A2 <- function(x){
  n <- length(x)
  return(- n - (1 / n) * sum(seq(1, 2 * n - 1, 2) * (log(x) + log(1 - rev(x)))))
}

### Create a 'print' method for class "gof_test"
print.gof_test <- function(x){
  cat('Results of Goodness-of-Fit Test\n-------------------------------\n\nTest Method:                     ',x$Method,'\n\nNull distribution:               ',x$Distribution,'\n\nSample Size:                     ',x$n,'\n\nEstimated Parameters:            ',x$Estimated,'\n\nParameters (and Estimations):    ',x$Parameters,'\n\nTest Statistic:                  ',x$Statistic_Name,' = ',x$Statistic,'\n\n\nIntervals for H0:\n',x$Critical,'', sep='')
}

### Distribution function 
F_extreme <- function(x, location, scale){
  return(exp(-exp(-(x - location) / scale)))
}

### Estimation Function
est_extreme <- function(x, param = c(NA,NA)){
  n <- length(x)
  
  # location unknown, scale known, Case 1
  if (is.na(param[1]) == TRUE & is.na(param[2]) != TRUE){
    location <- -param[2] * log(mean(exp(- x / param[2])))
    return(c(location, param[2]))
  }
  
  # location known, scale unknown, Case 2
  if (is.na(param[1]) != TRUE & is.na(param[2]) == TRUE){
    y <- x - param[1]
    estimator <- function(scale){
      return((sum(y) - sum(y * exp(- y / scale))) / n - scale)
    }
    scale <- uniroot(estimator, c(0,100))$root
    return(c(param[1], scale))
  }
  
  # both unknown, Case 3
  if (is.na(param[1]) == TRUE & is.na(param[2]) == TRUE){
    estimator <- function(scale){
      return(mean(x) - (sum(x * exp(- x / scale)) / sum(exp(- x / scale))) - scale)
    }
    scale <- uniroot(estimator, c(0.1,100))$root
    location <- - scale * log(1 / n * sum(exp(- x / scale)))
    return(c(location, scale))
  }
}

# Parameters are given as location, scale (alpha, beta)
extreme_gof <- function(x, statistic, param = c(NA, NA)){
  x <- sort(x)
  n <- length(x)
  
  # Cramer von Mises
  if(statistic == "cvm"){
    
    # location unknown, scale known, Case 1
    if(is.na(param[1]) == TRUE & is.na(param[2]) == FALSE){
      location <- est_extreme(x, c(NA, param[2]))[1]
      Z <- F_extreme(x, location, param[2])
      stat <- W2(Z) * (1 + 0.16 / n)
      out <- list(Method = "Cramér-von Mises Test for Goodness-of-Fit", Distribution = "Extreme Value", n = n, Estimated = "location", Parameters = c(as.character(location),", ",as.character(param[2])), Statistic = stat, Statistic_Name = "W^2", Critical = ".25: [0,.116] ; .10: [0,.175] ; .05: [0,.222] ; .025: [0,.271] ; .01: [0,.338]")
      class(out) <- "gof_test"
      return(out)
    }
    
    # location known, scale unknown, Case 2
    if(is.na(param[1]) == FALSE & is.na(param[2]) == TRUE){
      scale <- est_extreme(x, c(param[1],NA))[2]
      Z <- F_extreme(x, param[1], scale)
      stat <- W2(Z) 
      out <- list(Method = "Cramér-von Mises Test for Goodness-of-Fit", Distribution = "Extreme Value", n = n, Estimated = "scale", Parameters = c(as.character(param[1]),", ",as.character(scale)), Statistic = stat, Statistic_Name = "W^2", Critical = ".25: [0,.186]; .10: [0,.320] ; .05: [0,.431] ; .025: [0,.547] ; .01: [0,.705]")
      class(out) <- "gof_test"
      return(out)
    }
    
    # both unknown, Case 3
    if(is.na(param[1]) == TRUE & is.na(param[2]) == TRUE){
      location <- est_extreme(x)[1]
      scale <- est_extreme(x)[2]
      Z <- F_extreme(x, location, scale)
      stat <- W2(Z) * (1 + 0.2 / sqrt(n))
      out <- list(Method = "Cramér-von Mises Test for Goodness-of-Fit", Distribution = "Extreme Value", n = n, Estimated = "location, scale", Parameters = c(as.character(location),", ",as.character(scale)), Statistic = stat, Statistic_Name = "W^2", Critical = ".25: [0,.073]; .10: [0,.102] ; .05: [0,.124] ; .025: [0,.146] ; .01: [0,.175]")
      class(out) <- "gof_test"
      return(out)
    } 
  }
    


  # Anderson Darling
  if(statistic == "ad"){
    
    # location unknown, scale known, Case 1
    if(is.na(param[1]) == TRUE & is.na(param[2]) == FALSE){
      location <- est_extreme(x, c(NA, param[2]))[1]
      Z <- F_extreme(x, location, param[2])
      stat <- A2(Z) * (1 + 0.3 / n)
      out <- list(Method = "Anderson-Darling Test for Goodness-of-Fit", Distribution = "Extreme Value", n = n, Estimated = "location", Parameters = c(as.character(location),", ",as.character(param[2])), Statistic = stat, Statistic_Name = "A^2", Critical = ".25: [0,.736]; .10: [0,1.062] ; .05: [0,1.321] ; .025: [0,1.591] ; .01: [0,1.959]")
      class(out) <- "gof_test"
      return(out)
    }
    
    # location known, scale unknown, Case 2
    if(is.na(param[1]) == FALSE & is.na(param[2]) == TRUE){
      scale <- est_extreme(x, c(param[1],NA))[2]
      Z <- F_extreme(x, param[1], scale)
      stat <- A2(Z) 
      out <- list(Method = "Anderson-Darling Test for Goodness-of-Fit", Distribution = "Extreme Value", n = n, Estimated = "scale", Parameters = c(as.character(param[1]),", ",as.character(scale)), Statistic = stat, Statistic_Name = "A^2", Critical = ".25: [0,.1.06]; .10: [0,.1.725] ; .05: [0,2.277] ; .025: [0,2.854] ; .01: [0,3.640]")
      class(out) <- "gof_test"
      return(out)
    }
    
    # both unknown, Case 3
    if(is.na(param[1]) == TRUE & is.na(param[2]) == TRUE){
      location <- est_extreme(x, c(NA, NA))[1]
      scale <- est_extreme(x, c(NA, NA))[2]
      Z <- F_extreme(x, location, scale)
      stat <- A2(Z) * (1 + 0.2 / sqrt(n)) 
      out <- list(Method = "Anderson-Darling Test for Goodness-of-Fit", Distribution = "Extreme Value", n = n, Estimated = "location, scale", Parameters = c(as.character(location),", ",as.character(scale)), Statistic = stat, Statistic_Name = "A^2", Critical = ".25: [0,.474]; .10: [0,.637] ; .05: [0,.757] ; .025: [0,.877] ; .01: [0,1.038]")
      class(out) <- "gof_test"
      return(out)
    } 
  }
}
