library(tidyverse)
library(EnvStats)
library(rootSolve)
library(SpatialExtremes)
library(pracma)
library(expint)

### Test statistics for Cramer von Mises- and Anderson Darling test for Goodness of fit
W2 <- function(x){
  n <- length(x)
  result <- sum((x - (seq(1, 2 * n - 1, 2) / (2 * n))) ** 2)
  return(result + 1 / (12 * n))
}

A2 <- function(x){
  n <- length(x)
  return(- n - (1 / n) * sum(seq(1, 2 * n - 1, 2) * (log(x) + log(1 - rev(x)))))
}

### Create a 'print' method for class "gof_test"
print.gof_test <- function(x){
  cat('Results of Goodness-of-Fit Test\n-------------------------------\n\nTest Method:                     ',x$Method,'\n\nNull distribution:               ',x$Distribution,'\n\nSample Size:                     ',x$n,'\n\nEstimated Parameters:            ',x$Estimated,'\n\nParameters (and Estimations):    ',x$Parameters,'\n\nTest Statistic:                  ',x$Statistic_Name,' = ',x$Statistic,'\n\n\nIntervals for H0:\n',x$Critical,'', sep='')
}

### Exponential distribution
exp_gof <- function(x, statistic) {
  x <- sort(x)
  n <- length(x)
  
  # Cramer von Mises
  if(statistic == "cvm"){
    
    # Lambda not known, Case 1
    lambda_est <- 1 / mean(x)
    Z <- pexp(x, rate = lambda_est)
    stat <- W2(Z) * (1 + 0.16 / n)
    out <- list(Method = "CramÃ©r-von Mises Test for Goodness-of-Fit", Distribution = "exponential", n = n, Estimated = "lambda", Parameters = as.character(lambda_est), Statistic = stat, Statistic_Name = "W^2", Critical = ".25: [0,.116] ; .15: [0,.148] ; .10: [0,.175] ; .05: [0,.222] ; .025: [0,.271] ; .01: [0,0.338] ; .005: [0,0.390]")
    class(out) <- "gof_test"
    return(out)
    }

  # Anderson Darling
  if(statistic == "ad"){
    
    # Lambda not known, Case 1
    lambda_est <- 1 / mean(x)
    Z <- pexp(x, rate = lambda_est)
    stat <- A2(Z) * (1 + 0.6 / n)
    out <- list(Method = "Anderson-Darling Test for Goodness-of-Fit", Distribution = "exponential", n = n, Estimated = "lambda", Parameters = as.character(lambda_est), Statistic = stat, Statistic_Name = "A^2", Critical = ".25: [0,.736] ; .15: [0,.916] ; .10: [0,1.062] ; .05: [0,1.321] ; .025: [0,1.591] ; .01: [0,1.959] ; .005: [0,2.244]")
    class(out) <- "gof_test"
    return(out)
  }
}
